package com.spark.scala

import java.util.ArrayList
import scala.collection.mutable.ArrayBuffer
import scala.collection.JavaConversions._
import scala.collection.mutable.Map
import java.util.HashMap
import scala.io.Source
import java.io.File
import scala.collection.Iterator


object ScalaGramaer {
  var list=new ArrayList[String]
  def main(args: Array[String]): Unit = {
    //listGrammer()
    //mapGrammer()
    //tupleGrammer()
fileGrammer()
  }
  /**
   * scala集合操作
   * 1.想要使用java的集合，需要导入
   *	  import scala.collection.JavaConversions._
   * 		会内部将java的集合转换为scala的集合
   * 2.java的集合和scala的集合不能显式转换，但是可以隐式转换，如，SparkContext.parallelize(data)
   * 		需要的是一个scala的data，但是可以传一个java的集合
   */
  def fileGrammer(){
   // var file=Source.fromFile("D:\\tmp\\input\\smy_biz_dil\\part-m-00000", "utf-8")
    //var file=Source.fromURL("http://www.baidu.com", "utf-8")
   // file.getLines.foreach { println };
    //bian li mulu 
    /*walk(new File("D:\\tmp\\input\\"))
    list.foreach { println }*/
  }

  //遍历路径下所有的文件
  def walk(file:File){
   if(file.isDirectory()) file.listFiles().foreach (walk) else list.add(file.getPath())
}
  def readAllfiles(dir:File):Iterator[File]={
    //scan a dir return all file 
    var child=dir.listFiles().filter { _.isDirectory()}
     child.toIterator++child.toIterator.flatMap { readAllfiles _ }
  }
  def listGrammer(){
    //遍历集合,可以有下标无下标
   var list=new ArrayList[String]();list.add("s")
   for(value<- list) println(value)
   for(i<- 0.until(list.length))println(list(i))
   for(i<- 0 until list.length)println(list(i))
  
  }
  def mapGrammer(){
    //mutable可变的
    var map=Map("a"->1,"b"->2)
    println(map("a"))
    //用get返回的是一个option
    println(map.get("b"))
    println(map.get("c"))
    //改变一个key的值
    map("a")=6
    println(map("a"))
    //新增一个值
    map+="c"->3
    println(map("c"))
    //移除一个值
    map-="c"
    println(map.getOrElse("c", "无这个key"))
    //如果有这个key就返回key的值
    println(map.getOrElse("null", "无这个key"))
    
    //遍历一个map
     println("遍历一个map")
    for((k,value)<-map){
      println(k+":"+value)
    }
    println("遍历一个map的key")
    for(k<-map.keySet){
      println(k)
    }
    
  }
  def tupleGrammer(){
    //元祖类型Tuple可以是多元的
    var tuple1=(1)
    var tuple2=("1",2)
    var tuple3=("1",2,"3")
    var tuple4=("1",2,"3",4)
    println(tuple3._3)
    
  }

/**
 * @author Administrator
 */
class Person(n:String) {
  //必须初始化属性
  var name=n;
  var age=0;
  var address="";
  //这是一个辅助构造器，scala的构造器必须以另一个构造器为起点，否则报错
  def this(name:String,age:Int){
    this(name)
    this.age=age
  }
  def this(name:String,age:Int,address:String){
    this(name,age)
    this.address=address
  }
}
  
}

